{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pose2Sim N.B:. Please set undistort_points and handle_LR_swap to false for now since it currently leads to inaccuracies. I'll try to fix it soon. News : Version 0.8: Automatic camera synchronization is now supported! Other recently added features : Multi-person analysis, Blender visualization, Marker augmentation, Automatic batch processing. To upgrade, type pip install pose2sim --upgrade . Pose2Sim provides a workflow for 3D markerless kinematics, as an alternative to the more usual marker-based motion capture methods. It aims to provide a free tool to obtain research-grade results from consumer-grade equipment. Any combination of phone, webcam, GoPro, etc. can be used. Pose2Sim stands for \"OpenPose to OpenSim\", as it uses OpenPose inputs (2D keypoints coordinates obtained from multiple videos) and leads to an OpenSim result (full-body 3D joint angles). Other 2D pose estimators such as BlazePose (MediaPipe), DeepLabCut, AlphaPose, can now be used as inputs. If you can only use one single camera and don't mind losing some accuracy, please consider using Sports2D . N.B.: As always, I am more than happy to welcome contributors (see How to contribute ). Pose2Sim releases: v0.1 (08/2021) : Published paper v0.2 (01/2022) : Published code v0.3 (01/2023) : Supported other pose estimation algorithms v0.4 (07/2023) : New calibration tool based on scene measurements v0.5 (12/2023) : Automatic batch processing v0.6 (02/2024) : Marker augmentation, Blender visualizer v0.7 (03/2024) : Multi-person analysis v0.8 (04/2024) : New synchronization tool v0.9: Calibration based on keypoint detection, Handling left/right swaps, Correcting lens distortions v0.10: Graphical User Interface v1.0: First accomplished release How to cite and how to contribute How to cite If you use this code or data, please cite Pagnon et al., 2022b , Pagnon et al., 2022a , or Pagnon et al., 2021 . @Article{Pagnon_2022_JOSS, AUTHOR = {Pagnon, David and Domalain, Mathieu and Reveret, Lionel}, TITLE = {Pose2Sim: An open-source Python package for multiview markerless kinematics}, JOURNAL = {Journal of Open Source Software}, YEAR = {2022}, DOI = {10.21105/joss.04362}, URL = {https://joss.theoj.org/papers/10.21105/joss.04362} } @Article{Pagnon_2022_Accuracy, AUTHOR = {Pagnon, David and Domalain, Mathieu and Reveret, Lionel}, TITLE = {Pose2Sim: An End-to-End Workflow for 3D Markerless Sports Kinematics\u2014Part 2: Accuracy}, JOURNAL = {Sensors}, YEAR = {2022}, DOI = {10.3390/s22072712}, URL = {https://www.mdpi.com/1424-8220/22/7/2712} } @Article{Pagnon_2021_Robustness, AUTHOR = {Pagnon, David and Domalain, Mathieu and Reveret, Lionel}, TITLE = {Pose2Sim: An End-to-End Workflow for 3D Markerless Sports Kinematics\u2014Part 1: Robustness}, JOURNAL = {Sensors}, YEAR = {2021}, DOI = {10.3390/s21196530}, URL = {https://www.mdpi.com/1424-8220/21/19/6530} } How to contribute I would happily welcome any proposal for new features, code improvement, and more! If you want to contribute to Pose2Sim, please see this issue . You will be proposed a to-do list, but please feel absolutely free to propose your own ideas and improvements. Main To-Do List Synchronization Graphical User Interface Self-calibration based on keypoint detection Detailed GOT-DONE and TO-DO list Pose Support OpenPose body_25b for more accuracy, body_135 for pronation/supination. Support BlazePose for faster inference (on mobile device). Support DeepLabCut for training on custom datasets. Support AlphaPose as an alternative to OpenPose. Define custom model in config.toml rather than in skeletons.py. Support MMPose , SLEAP , etc. Directly reading from DeepLabCut .csv or .h5 files instead of converting to .json. GUI help for DeepLabCut model creation. Calibration Convert Qualisys .qca.txt calibration file. Convert Optitrack extrinsic calibration file. Convert Vicon .xcp calibration file. Convert OpenCap .pickle calibration files. Convert EasyMocap .yml calibration files. Convert bioCV calibration files. Easier and clearer calibration procedure: separate intrinsic and extrinsic parameter calculation. Once object points have been detected, track them for live calibration of moving cameras. Calibrate cameras by pairs and compute average extrinsic calibration. Fine-tune calibration with bundle adjustment. Triangulation Triangulation weighted with confidence. Show mean reprojection error in px and in mm for each keypoint. Implement normalized DLT and RANSAC triangulation, Outlier rejection. Filtering Available filtering methods: Butterworth, Butterworth on speed, Gaussian, Median, LOESS. Implement Kalman filter and Kalman smoother. Implement smoothNet . OpenSim Integrate better spine from lifting fullbody model to the gait full-body model . Implement optimal fixed-interval Kalman smoothing for inverse kinematics. GUI Blender add-on (cf MPP2SOS ). 3D plot of cameras and of triangulated keypoints. Demo Provide Demo data for users to test the code. Add videos for users to experiment with other pose detection frameworks. Documentation Use Sphinx , MkDocs , or github.io for clearer documentation. Bugs Bug: FFMPEG error message when calibration files are images. Bug: Python crashes after a few runs of Pose2Sim.filtering() when display_figures=true . Acknowledgements: Supervised my PhD: @lreveret (INRIA, Universit\u00e9 Grenoble Alpes), and @mdomalai (Universit\u00e9 de Poitiers). Provided the Demo data: @aaiaueil from Universit\u00e9 Gustave Eiffel. Tested the code and provided feedback: @simonozan , @daeyongyang , @ANaaim , @rlagnsals Submitted various accepted pull requests: @ANaaim , @rlagnsals Provided a code snippet for Optitrack calibration: @claraaudap (Universit\u00e9 Bretagne Sud). Issued MPP2SOS, a (non-free) Blender extension based on Pose2Sim: @carlosedubarreto","title":"Introduction"},{"location":"#pose2sim","text":"","title":"Pose2Sim"},{"location":"#nb-please-set-undistort_points-and-handle_lr_swap-to-false-for-now-since-it-currently-leads-to-inaccuracies-ill-try-to-fix-it-soon","text":"News : Version 0.8: Automatic camera synchronization is now supported! Other recently added features : Multi-person analysis, Blender visualization, Marker augmentation, Automatic batch processing. To upgrade, type pip install pose2sim --upgrade . Pose2Sim provides a workflow for 3D markerless kinematics, as an alternative to the more usual marker-based motion capture methods. It aims to provide a free tool to obtain research-grade results from consumer-grade equipment. Any combination of phone, webcam, GoPro, etc. can be used. Pose2Sim stands for \"OpenPose to OpenSim\", as it uses OpenPose inputs (2D keypoints coordinates obtained from multiple videos) and leads to an OpenSim result (full-body 3D joint angles). Other 2D pose estimators such as BlazePose (MediaPipe), DeepLabCut, AlphaPose, can now be used as inputs. If you can only use one single camera and don't mind losing some accuracy, please consider using Sports2D . N.B.: As always, I am more than happy to welcome contributors (see How to contribute ). Pose2Sim releases: v0.1 (08/2021) : Published paper v0.2 (01/2022) : Published code v0.3 (01/2023) : Supported other pose estimation algorithms v0.4 (07/2023) : New calibration tool based on scene measurements v0.5 (12/2023) : Automatic batch processing v0.6 (02/2024) : Marker augmentation, Blender visualizer v0.7 (03/2024) : Multi-person analysis v0.8 (04/2024) : New synchronization tool v0.9: Calibration based on keypoint detection, Handling left/right swaps, Correcting lens distortions v0.10: Graphical User Interface v1.0: First accomplished release","title":"N.B:. Please set undistort_points and handle_LR_swap to false for now since it currently leads to inaccuracies. I'll try to fix it soon."},{"location":"#how-to-cite-and-how-to-contribute","text":"How to cite If you use this code or data, please cite Pagnon et al., 2022b , Pagnon et al., 2022a , or Pagnon et al., 2021 . @Article{Pagnon_2022_JOSS, AUTHOR = {Pagnon, David and Domalain, Mathieu and Reveret, Lionel}, TITLE = {Pose2Sim: An open-source Python package for multiview markerless kinematics}, JOURNAL = {Journal of Open Source Software}, YEAR = {2022}, DOI = {10.21105/joss.04362}, URL = {https://joss.theoj.org/papers/10.21105/joss.04362} } @Article{Pagnon_2022_Accuracy, AUTHOR = {Pagnon, David and Domalain, Mathieu and Reveret, Lionel}, TITLE = {Pose2Sim: An End-to-End Workflow for 3D Markerless Sports Kinematics\u2014Part 2: Accuracy}, JOURNAL = {Sensors}, YEAR = {2022}, DOI = {10.3390/s22072712}, URL = {https://www.mdpi.com/1424-8220/22/7/2712} } @Article{Pagnon_2021_Robustness, AUTHOR = {Pagnon, David and Domalain, Mathieu and Reveret, Lionel}, TITLE = {Pose2Sim: An End-to-End Workflow for 3D Markerless Sports Kinematics\u2014Part 1: Robustness}, JOURNAL = {Sensors}, YEAR = {2021}, DOI = {10.3390/s21196530}, URL = {https://www.mdpi.com/1424-8220/21/19/6530} } How to contribute I would happily welcome any proposal for new features, code improvement, and more! If you want to contribute to Pose2Sim, please see this issue . You will be proposed a to-do list, but please feel absolutely free to propose your own ideas and improvements.","title":"How to cite and how to contribute"},{"location":"#main-to-do-list","text":"Synchronization Graphical User Interface Self-calibration based on keypoint detection","title":"Main To-Do List"},{"location":"#detailed-got-done-and-to-do-list","text":"","title":"Detailed GOT-DONE and TO-DO list"},{"location":"#pose","text":"Support OpenPose body_25b for more accuracy, body_135 for pronation/supination. Support BlazePose for faster inference (on mobile device). Support DeepLabCut for training on custom datasets. Support AlphaPose as an alternative to OpenPose. Define custom model in config.toml rather than in skeletons.py. Support MMPose , SLEAP , etc. Directly reading from DeepLabCut .csv or .h5 files instead of converting to .json. GUI help for DeepLabCut model creation.","title":"Pose"},{"location":"#calibration","text":"Convert Qualisys .qca.txt calibration file. Convert Optitrack extrinsic calibration file. Convert Vicon .xcp calibration file. Convert OpenCap .pickle calibration files. Convert EasyMocap .yml calibration files. Convert bioCV calibration files. Easier and clearer calibration procedure: separate intrinsic and extrinsic parameter calculation. Once object points have been detected, track them for live calibration of moving cameras. Calibrate cameras by pairs and compute average extrinsic calibration. Fine-tune calibration with bundle adjustment.","title":"Calibration"},{"location":"#triangulation","text":"Triangulation weighted with confidence. Show mean reprojection error in px and in mm for each keypoint. Implement normalized DLT and RANSAC triangulation, Outlier rejection.","title":"Triangulation"},{"location":"#filtering","text":"Available filtering methods: Butterworth, Butterworth on speed, Gaussian, Median, LOESS. Implement Kalman filter and Kalman smoother. Implement smoothNet .","title":"Filtering"},{"location":"#opensim","text":"Integrate better spine from lifting fullbody model to the gait full-body model . Implement optimal fixed-interval Kalman smoothing for inverse kinematics.","title":"OpenSim"},{"location":"#gui","text":"Blender add-on (cf MPP2SOS ). 3D plot of cameras and of triangulated keypoints.","title":"GUI"},{"location":"#demo","text":"Provide Demo data for users to test the code. Add videos for users to experiment with other pose detection frameworks.","title":"Demo"},{"location":"#documentation","text":"Use Sphinx , MkDocs , or github.io for clearer documentation.","title":"Documentation"},{"location":"#bugs","text":"Bug: FFMPEG error message when calibration files are images. Bug: Python crashes after a few runs of Pose2Sim.filtering() when display_figures=true . Acknowledgements: Supervised my PhD: @lreveret (INRIA, Universit\u00e9 Grenoble Alpes), and @mdomalai (Universit\u00e9 de Poitiers). Provided the Demo data: @aaiaueil from Universit\u00e9 Gustave Eiffel. Tested the code and provided feedback: @simonozan , @daeyongyang , @ANaaim , @rlagnsals Submitted various accepted pull requests: @ANaaim , @rlagnsals Provided a code snippet for Optitrack calibration: @claraaudap (Universit\u00e9 Bretagne Sud). Issued MPP2SOS, a (non-free) Blender extension based on Pose2Sim: @carlosedubarreto","title":"Bugs"}]}